#include "DialogLive.h"
#include "ui_DialogLive.h"
#include "Packet.h"
#include <QMessageBox>
DialogLive::DialogLive(QString name, QString num, QWidget *parent) :
    QDialog(parent),name(name),num(num),
    ui(new Ui::DialogLive)
{
    ui->setupUi(this);    

    connect(this,SIGNAL(sigWrite(int,User)),this->parentWidget(),SLOT(onSigWrite(int,User)));
    port = num.toUShort();
    sender = new QUdpSocket(this);//Udp发送    
    sender->setSocketOption(QAbstractSocket::MulticastTtlOption,1);

    receiver = new QUdpSocket(this);//Udp接收
    receiver->bind(port,QUdpSocket::ReuseAddressHint);
    //视屏
    QCameraInfo info = QCameraInfo::defaultCamera();
    camera = new QCamera(info,this);
    VideoSurface *vf = new VideoSurface(this);
    camera->setViewfinder(vf);
    connect(vf,SIGNAL(videoChanged(QVideoFrame)),
            this,SLOT(onVideoChanged(QVideoFrame)));

    //音频
    audioFormat.setSampleRate(8000);
    audioFormat.setChannelCount(1);
    audioFormat.setSampleSize(16);
    audioFormat.setCodec("audio/pcm");
    audioFormat.setByteOrder(QAudioFormat::LittleEndian);
    audioFormat.setSampleType(QAudioFormat::SignedInt);
    audioInput = new QAudioInput(audioFormat);

}

DialogLive::~DialogLive()
{
    delete ui;
}

void DialogLive::closeEvent(QCloseEvent *event)
{
    User user;
    int type = TYPE_OUTROOM;
    user.setType(type);
    user.setName(name);//主播名字
    user.setPort(port);//房间port
    emit sigWrite(type,user);//把退出房间请求发给主界面，由主界面发往服务器
}

void DialogLive::setName(QString name)
{
    this->name=name;
}

void DialogLive::setNum(QString num)
{
    this->num = num;
}

QString DialogLive::getName()
{
    return name;
}

QString DialogLive::getNum()
{
    return num;
}
//打开摄像头,打开麦克风
void DialogLive::on_btn_start_clicked()
{
    camera->start();
    audioDevice = audioInput->start();
    connect(audioDevice,SIGNAL(readyRead()),
            this,SLOT(on_audioIOdevice()));
}

void DialogLive::on_btn_stop_clicked()
{
    camera->stop();

}

void DialogLive::on_btn_close_clicked()
{    
    camera->stop();

}

void DialogLive::onReadyRead()
{

}

//弹幕消息通过Tcp发给服务器，服务器通过广播转发给相同房间(监听相同PORT)的其他用户
void DialogLive::on_btn_send_clicked()
{
    int type = TYPE_MSG;
    QString message = ui->le_msg->text();
    User user;
    user.setType(type);
    user.setName(name);
    user.setMessage(message);
    user.setPort(port);
    emit sigWrite(type,user);
}
//捕捉到摄像头图片并发送
void DialogLive::onVideoChanged(QVideoFrame curFrame)
{
    static int i = 0;
    i++;
    int unitBytes = 225;//一个包装的字节

    //摄像头录像
    QVideoFrame frame(curFrame);
    frame.map(QAbstractVideoBuffer::ReadOnly);
    QImage image(frame.bits(),
                 frame.width(),
                 frame.height(),
                 QVideoFrame::imageFormatFromPixelFormat(frame.pixelFormat()));
    image = image.scaled(ui->lb_live->size(),
                         Qt::IgnoreAspectRatio,Qt::SmoothTransformation);
    //录像转换成图像数据
    QMatrix matrix;//矩形
    matrix.rotate(180);//反转180度
    image = image.transformed(matrix);
    QPixmap pixmap = QPixmap::fromImage(image);
    pixmap = pixmap.scaled(ui->lb_live->size());
    ui->lb_live->setPixmap(pixmap);//主播界面显示图像

    if(i%2 != 0)//隔一帧
        return;
    int byteCount = image.byteCount();//一帧有则么多字节
    int width = image.width();
    int height = image.height();
    int bytePerLine = image.bytesPerLine();
    int writBytes = 0;//已经发送的字节数

    //将图像数据进行UDP广播
    while (true)
    {
        UPacket pack;
        pack.type = TYPE_VIDEO;
        pack.width = width;
        pack.height = height;
        pack.bytesPerline = bytePerLine;
        if(writBytes < byteCount)
        {
            memcpy(pack.data,(char*)image.bits()+writBytes,unitBytes);//255装一个包
            pack.packTaken = unitBytes;//装了多少：255
            writBytes += unitBytes;//自增255
            //如果一帧所有字节都传完了，或者255*n>一帧的字节，最后一个包要<255
            if(writBytes >= byteCount)
            {
                pack.isLastPack = true;
                //pack.packTaken = unitBytes - writBytes + byteCount;
                pack.packTaken = writBytes - byteCount;//<255
                //255*n-N
            }
            else
            {
                pack.isLastPack = false;
                pack.packTaken = unitBytes;
            }
            sender->writeDatagram((char*)&pack,sizeof(UPacket),QHostAddress::Broadcast,port);
        }
        else
        {
            break;//一帧发完
        }
    }
}
//捕捉到音频并发送
void DialogLive::on_audioIOdevice()
{
    UPacket pack;
    memset(&pack, 0, sizeof(UPacket));
    pack.type = TYPE_AUDIO;
    pack.datalen = audioDevice->read(pack.data,1024);
    sender->writeDatagram((char*)&pack, sizeof(UPacket),QHostAddress::Broadcast,port);
}
